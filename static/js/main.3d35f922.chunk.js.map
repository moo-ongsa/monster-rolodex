{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/seach-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placheoder","handleChange","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","user","setState","this","filteredMonsters","filter","toLowerCase","includes","value","target","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCNTC,EAAW,SAACR,GAAW,IAC1BS,EAAaT,EAAbS,SACR,OACE,qBAAKR,UAAU,YAAf,SACGQ,EAASC,KAAI,SAACN,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAf,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLC,YAAaH,EACbI,SAAUH,MC+BCI,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,S,oBAE5C,WAAU,IAAD,SAC2BE,KAAKR,MAA/BT,EADD,EACCA,SAAUU,EADX,EACWA,YAEZQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,6DACA,cAAC,EAAD,CACEW,WAAW,iBACXC,aAAc,gBAAakB,EAAb,EAAGC,OAAUD,MAAb,OAA2B,EAAKN,SAAS,CAAEN,YAAaY,OAExE,cAAC,EAAD,CAAUtB,SAAUkB,W,GA5BVM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3d35f922.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n  const { monsters } = props;\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placheoder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placheoder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from 'react'\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport { SearchBox } from './components/search-box/seach-box.component';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(user => this.setState({ monsters: user }))\r\n  }\r\n  render() {\r\n    const { monsters, searchField } = this.state\r\n\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex JavaScript</h1>\r\n        <SearchBox\r\n          placheoder='seach monsters'\r\n          handleChange={({ target: { value } }) => this.setState({ searchField: value })}\r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}